[{"/Users/alvinh.bui/Documents/Projects/my-wave-portal/frontend/pages/_app.js":"1","/Users/alvinh.bui/Documents/Projects/my-wave-portal/frontend/pages/api/hello.js":"2","/Users/alvinh.bui/Documents/Projects/my-wave-portal/frontend/pages/index.js":"3"},{"size":137,"mtime":1634755508812,"results":"4","hashOfConfig":"5"},{"size":170,"mtime":1634755508813,"results":"6","hashOfConfig":"5"},{"size":7908,"mtime":1634935914190,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10a4qqr",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/Users/alvinh.bui/Documents/Projects/my-wave-portal/frontend/pages/_app.js",[],"/Users/alvinh.bui/Documents/Projects/my-wave-portal/frontend/pages/api/hello.js",[],"/Users/alvinh.bui/Documents/Projects/my-wave-portal/frontend/pages/index.js",["15"],"import Head from 'next/head'\nimport Image from 'next/image'\nimport styles from '../styles/Home.module.css'\n\n// https://app.mycrypto.com/faucet\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport { TextField } from '@mui/material';\n\nimport Loader from \"react-loader-spinner\";\n\nimport WavePortalArtifact from \"../utils/WavePortalArtifact.json\"\nimport { borderRadius } from '@mui/system';\n\nconst App = () => {\n  const contractAddress = '0xbAd0d5E03493CbeBC2D9afCED2Cd86624f1Fd548';\n  const contractABI = WavePortalArtifact.abi;\n  /*\n  * Just a state variable we use to store our user's public wallet.\n  */\n\n  const [waveMessage, setWaveMessage] = useState(\"\");\n  const [waveMessageValue, setWaveMessageValue] = useState(\"\");\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [currentNumWaves, setCurrentNumWaves] = useState(0);\n  const [allWaves, setAllWaves] = useState([]);\n  const [isMining, setIsMining] = useState(false);\n  \n  /*\n   * Create a method that gets all waves from your contract\n   */\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n        \n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n\n        /**\n         * Listen in for emitter events!\n         */\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      \n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      \n      /*\n      * Check if we're authorized to access the user's wallet\n      */\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n      \n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const getCurrentCount = async () => {\n    try {\n        const { ethereum } = window;\n\n        if (ethereum) {\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n          let count = await wavePortalContract.getTotalWaves();\n          setCurrentNumWaves(count.toNumber())\n        }\n          else {\n          console.log(\"Ethereum object doesn't exist!\");\n        }\n      } catch (error) {\n        console.log(error)\n      }\n  }\n\n  /**\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n      getCurrentCount();\n      getAllWaves();\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        /*\n        * Execute the actual wave from your smart contract\n\n        A transaction hash/id is a unique string of characters that is given to every transaction that is verified and added to the blockchain. In many cases, a transaction hash is needed in order to locate funds.\n\n        */\n\n        const waveTxn = await wavePortalContract.wave(waveMessage, { gasLimit: 300000 });\n\n        try {\n          setIsDisabled(true)\n          setIsMining(true)\n          console.log(\"Mining...\", waveTxn.hash);\n          await waveTxn.wait();\n          \n          setIsMining(false)\n          console.log(\"Mined -- \", waveTxn.hash);\n          setIsDisabled(false)\n          setWaveMessage(\"\")\n        } catch (e) {\n          setIsDisabled(false)\n          setIsMining(false)\n          console.log(e)\n          setWaveMessage(\"\")\n          setIsDisabled(false)\n          alert(\"Something went wrong /:\")\n        }\n\n        let count = await wavePortalContract.getTotalWaves();\n        setCurrentNumWaves(count.toNumber());\n        getAllWaves();\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n      setIsMining(false)\n    }\n}\n\nconst handleMessageChange = (e) => {\n  setWaveMessage(e.target.value)\n}\n  \n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getCurrentCount();\n  }, [])\n  \n  return (\n    <div className={styles.mainContainer}>\n\n      <div className={styles.dataContainer}>\n        <div className={styles.header}>\n        ðŸ‘‹ Hey there!\n        </div>\n\n        <div className={styles.bio}>\n        {`I am Alvin and I'm not sure what I'm doing.`}\n        </div>\n\n        <div className={styles.bio}>\n        {`Connect your Ethereum wallet and wave at me!`}\n        </div>\n        \n        {/*\n        * If there is no currentAccount render this button\n        */}\n        {!currentAccount ? (\n          <button className={styles.waveButton} onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        ) :\n         <>\n         <div className={styles.textField} >\n         <TextField size=\"small\" variant=\"standard\" placeholder=\"Include a Message...\" fullWidth=\"true\" onChange={handleMessageChange} value={waveMessage} disabled={isDisabled}/>\n         </div>\n        {isMining ? (\n          <button className={styles.waveButton} onClick={wave}>\n          <Loader type=\"ThreeDots\" color=\"#2a9d8f\" height={10} width={40}/>\n        </button>) : (\n          <button className={styles.waveButton} onClick={wave}>\n          Wave at Me\n        </button>\n        )}\n        </>\n        }\n\n         <div className={styles.bio}>\n        Current number of waves: {currentNumWaves}\n        </div>\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"lightgrey\", marginTop: \"16px\", padding: \"8px\", borderRadius: \"5px\"}}>\n              <div>Address: {wave.address}</div>\n              <br/>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <br/>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;",{"ruleId":"16","severity":1,"message":"17","line":216,"column":6,"nodeType":"18","endLine":216,"endColumn":8,"suggestions":"19"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkIfWalletIsConnected' and 'getCurrentCount'. Either include them or remove the dependency array.","ArrayExpression",["20"],{"desc":"21","fix":"22"},"Update the dependencies array to be: [checkIfWalletIsConnected, getCurrentCount]",{"range":"23","text":"24"},[6104,6106],"[checkIfWalletIsConnected, getCurrentCount]"]